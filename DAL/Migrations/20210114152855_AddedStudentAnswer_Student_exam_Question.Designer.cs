// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ExamsAppContext))]
    [Migration("20210114152855_AddedStudentAnswer_Student_exam_Question")]
    partial class AddedStudentAnswer_Student_exam_Question
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("ClassroomStudent", b =>
                {
                    b.Property<int>("ClassroomsClassroomID")
                        .HasColumnType("int");

                    b.Property<int>("StudentsID")
                        .HasColumnType("int");

                    b.HasKey("ClassroomsClassroomID", "StudentsID");

                    b.HasIndex("StudentsID");

                    b.ToTable("ClassroomStudent");
                });

            modelBuilder.Entity("ClassroomTeacher", b =>
                {
                    b.Property<int>("ClassroomsClassroomID")
                        .HasColumnType("int");

                    b.Property<int>("TeachersID")
                        .HasColumnType("int");

                    b.HasKey("ClassroomsClassroomID", "TeachersID");

                    b.HasIndex("TeachersID");

                    b.ToTable("ClassroomTeacher");
                });

            modelBuilder.Entity("DAL.Models.AnswerChoise", b =>
                {
                    b.Property<int>("AnswerChoiseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerChoiceText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("AnswerChoiseId");

                    b.HasIndex("QuestionID");

                    b.ToTable("AnswerChoises");
                });

            modelBuilder.Entity("DAL.Models.AppUsers.AppUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("DAL.Models.Classroom", b =>
                {
                    b.Property<int>("ClassroomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassroomID");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("DAL.Models.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClassroomID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("DAL.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CorrectAnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.HasIndex("ExamID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DAL.Models.Student_Exam", b =>
                {
                    b.Property<int>("Student_ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<float?>("Grade")
                        .HasColumnType("real");

                    b.Property<bool>("IsAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Student_ExamID");

                    b.HasIndex("ExamID");

                    b.HasIndex("UserID");

                    b.ToTable("Studens_Exams");
                });

            modelBuilder.Entity("DAL.Models.Student_Exam_Question", b =>
                {
                    b.Property<int>("Student_Exam_QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQuestionAnswered")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Student_ExamID")
                        .HasColumnType("int");

                    b.HasKey("Student_Exam_QuestionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("Student_ExamID");

                    b.ToTable("Students_Exams_Questions");
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.Property<int>("StudentsID")
                        .HasColumnType("int");

                    b.Property<int>("TeachersID")
                        .HasColumnType("int");

                    b.HasKey("StudentsID", "TeachersID");

                    b.HasIndex("TeachersID");

                    b.ToTable("StudentTeacher");
                });

            modelBuilder.Entity("DAL.Models.AppUsers.Student", b =>
                {
                    b.HasBaseType("DAL.Models.AppUsers.AppUser");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("DAL.Models.AppUsers.Teacher", b =>
                {
                    b.HasBaseType("DAL.Models.AppUsers.AppUser");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("ClassroomStudent", b =>
                {
                    b.HasOne("DAL.Models.Classroom", null)
                        .WithMany()
                        .HasForeignKey("ClassroomsClassroomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUsers.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassroomTeacher", b =>
                {
                    b.HasOne("DAL.Models.Classroom", null)
                        .WithMany()
                        .HasForeignKey("ClassroomsClassroomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUsers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.AnswerChoise", b =>
                {
                    b.HasOne("DAL.Models.Question", "Question")
                        .WithMany("AnswerChoises")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Models.Exam", b =>
                {
                    b.HasOne("DAL.Models.Classroom", "Classroom")
                        .WithMany("Exams")
                        .HasForeignKey("ClassroomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUsers.Teacher", "Teacher")
                        .WithMany("Exams")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DAL.Models.Question", b =>
                {
                    b.HasOne("DAL.Models.Exam", null)
                        .WithMany("Questions")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Student_Exam", b =>
                {
                    b.HasOne("DAL.Models.Exam", "Exam")
                        .WithMany("StudentsExam")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUsers.Student", "User")
                        .WithMany("StudentExamsCollection")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Student_Exam_Question", b =>
                {
                    b.HasOne("DAL.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Student_Exam", "StudentExam")
                        .WithMany("Questions")
                        .HasForeignKey("Student_ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("StudentExam");
                });

            modelBuilder.Entity("StudentTeacher", b =>
                {
                    b.HasOne("DAL.Models.AppUsers.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.AppUsers.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Classroom", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("DAL.Models.Exam", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentsExam");
                });

            modelBuilder.Entity("DAL.Models.Question", b =>
                {
                    b.Navigation("AnswerChoises");
                });

            modelBuilder.Entity("DAL.Models.Student_Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DAL.Models.AppUsers.Student", b =>
                {
                    b.Navigation("StudentExamsCollection");
                });

            modelBuilder.Entity("DAL.Models.AppUsers.Teacher", b =>
                {
                    b.Navigation("Exams");
                });
#pragma warning restore 612, 618
        }
    }
}
